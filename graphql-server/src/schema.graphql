type Message {
  _id: ID
  text: String!
  from: String!
  conversationId: ID
  authorName: String
  createdAt: String
}

input MessageInput {
  from: ID!
  text: String!
  conversationId: ID
}

type Settings {
  language: String
}

type FriendRequest {
  sourceId: ID
  targetId: ID
}

type User {
  _id: ID
  username: String!
  firstName: String
  lastName: String
  password: String!
  passwordConfirm: String
  email: String
  friends: [ID]
  friendRequests: [User]
  conversations: [ID]
  token: String
  description: String
  avatar: String
  requestSent: Boolean
  settings: Settings
  joinedAt: String
}

type Response {
  success: Boolean
  errorMessage: String
}

type Conversation {
  _id: ID
  isOneOnOne: Boolean
  title: String
  members: [User]
  avatars: [String]
  lastMessage: Message
  admins: [ID]
  joinedAt: String
}

input ConversationInput {
  _id: ID
  creatorId: ID
  title: String
  members: [MemberInput]
  avatars: [String]
  message: String
}

input UserInput {
  username: String!
  firstName: String
  lastName: String
  password: String!
  passwordConfirm: String
  email: String
  description: String
  avatar: String
}

input MemberInput {
  userId: String
}

input FriendshipInput {
  myId: ID!
  friendId: ID!
}

type Existence {
  username: Boolean
  email: Boolean
}

type Mutation {
  login(userInput: UserInput): User!
  createUser(userInput: UserInput): Response!
  logout: Response!
  createMessage(messageInput: MessageInput): Message!
  createConversation(conversationInput: ConversationInput): Conversation
  sendFriendRequest(friendshipInput: FriendshipInput): ID
  acceptFriend(friendId: ID): ID
  rejectFriend(friendId: ID): ID
  leaveConversation(myId: ID, conversationId: ID): ID
  removeParticipant(conversationId: ID, participantId: ID): ID
  addParticipants(conversationId: ID, participants: [ID]): ID
  changeLanguage(language: String): String
  unfriend(friendId: ID): ID
}

type Query {
  user: User!
  friendRequests: [User]
  friends: [User]
  conversations: [Conversation]
  messages(conversationId: ID): [Message]
  discoveredUsers(search: String): [User]
  conversation(conversationId: ID): Conversation
  exists(username: String, email: String): Existence
}

type Subscription {
  messageCreated(conversationId: ID): Message
  friendRequestSent(targetId: ID): User
  friendRequestAccepted(sourceId: ID): User
  friendRemoved(friendId: ID): ID
}

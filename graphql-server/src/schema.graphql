type Message {
  text: String!
  from: String!
  conversationId: ID
  authorName: String
  createdAt: String
}

input MessageInput {
  from: ID!
  text: String!
  conversationId: ID
}

type User {
  _id: ID
  username: String!
  firstName: String
  lastName: String
  password: String!
  passwordConfirm: String
  email: String
  friends: [ID]
  conversations: [ID]
  token: String
  description: String
  avatar: String
}

type Response {
  success: Boolean
  errorMessage: String
}

type Conversation {
  _id: ID
  title: String
  members: [User]
  avatars: [String]
  message: String
}

input UserInput {
  username: String!
  firstName: String
  lastName: String
  password: String!
  passwordConfirm: String
  email: String
  description: String
  avatar: String
}

input FriendshipInput {
  myId: ID!
  friendId: ID!
}

type Mutation {
  login(userInput: UserInput): User!
  createUser(userInput: UserInput): Response!
  createMessage(messageInput: MessageInput): Message!
  acceptFriend(friendshipInput: FriendshipInput): ID
}

type Query {
  friends(userId: ID): [User]
  conversations(userId: ID): [Conversation]
  messages(conversationId: ID): [Message]
}

type Subscription {
  messageCreated(conversationId: ID):
}
